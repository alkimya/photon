# /usr/bin/python3
from argparse import Namespace
from asyncio import gather, run
from mimetypes import guess_type
from os import getenv, listdir
from os.path import dirname, isdir, isfile, join as concat
import sys

import gi
gi.require_version('Adw', '1')
gi.require_version('Gdk', '4.0')
gi.require_version('GdkPixbuf', '2.0')
gi.require_version('Gtk', '4.0')
from gi.repository.Gdk import ModifierType, Surface, keyval_name
from gi.repository.Gio import Cancellable, File 
from gi.repository.Gtk import (
    AboutDialog, ApplicationWindow, Button, CellRendererText, CellRendererPixbuf, CheckButton, Dialog,
    EventControllerKey, FileChooserAction, FileChooserNative, FileFilter, HeaderBar, IconTheme, Label, License,
    ResponseType, ScrolledWindow, SortType, TextView, TreeIter, TreeStore, TreeView, TreeViewColumn, Orientation, 
    Paned, Picture, Viewport)
from gi.repository.Adw import Application, ColorScheme

from pillow import (
    UnsharpMask, get_date, has_exif, imread, magic_enhance, exif_table, resize, rotate, simple_filter, to_pix, 
    BLUR, CONTOUR, DETAIL, EDGE_ENHANCE, EDGE_ENHANCE_MORE, EMBOSS, FIND_EDGES, SHARPEN, SMOOTH, SMOOTH_MORE, 
    MinFilter, MaxFilter, MedianFilter, UnsharpMask)
from profile import timing

n = Namespace()
n.shrinkable = True
n.fullscreen = False
n.dark_theme = False
n.dont_ask = False
n.pane_visible = False
n.exif_view = False
n.quality = 95

photo = Picture()
store = TreeStore(str, str, str)
n.itr_photo = TreeIter()
n.itr_row = TreeIter()
n.photos = []

PHOTON = getenv('PHOTON') or getenv('XDG_PICTURES_DIR')
n.path = PHOTON
class AppWindow(ApplicationWindow):
    """dev mode"""

    def __init__(self, *args, **kwargs):
        """dev mode"""
        super().__init__(*args, **kwargs)

        theme = IconTheme()
        theme.set_theme_name('Adwaita')

        header = HeaderBar()
        self.set_titlebar(header)

        sidebar_button = Button(label='Sidebar')
        sidebar_button.set_icon_name('sidebar-show-symbolic')
        sidebar_button.connect('clicked', self.sidebar_button_clicked)

        tview_button = Button(label='Toggle View')
        tview_button.set_icon_name('view-dual-symbolic')
        tview_button.connect('clicked', self.tview_button_clicked)

        home_button = Button(label='Home')
        home_button.set_icon_name('go-home-symbolic')
        home_button.connect('clicked', self.home_button_clicked)

        open_folder_button = Button(label='Open')
        open_folder_button.set_icon_name('folder-symbolic')
        open_folder_button.connect('clicked', self.open_folder_button_clicked)

        n.open_folder_dialog = FileChooserNative.new('Open a folder', self, FileChooserAction.SELECT_FOLDER)
        n.open_folder_dialog.connect('response', self.open_folder_dialog_response)

        enhance_button = Button(label='Enhance')
        enhance_button.set_icon_name('image-auto-adjust-symbolic')
        enhance_button.connect('clicked', self.enhance_button_clicked)

        prefs_button = Button(label='Preferences')
        prefs_button.set_icon_name('applications-system-symbolic')

        about_button = Button(label='About')
        about_button.set_icon_name('dialog-information-symbolic')
        about_button.connect('clicked', self.about_button_clicked)

        header.pack_start(sidebar_button)
        header.pack_start(tview_button)
        header.pack_start(home_button)
        header.pack_start(open_folder_button)
        header.pack_start(enhance_button)
        header.pack_start(prefs_button)
        header.pack_start(about_button)

        hpane = Paned.new(Orientation.HORIZONTAL)

        n.sidebar = Paned.new(Orientation.VERTICAL)

        n.tview = TreeView().new_with_model(store)
        n.col = TreeViewColumn('File System view :')
        colimg = CellRendererPixbuf()
        coltext = CellRendererText()
        n.col.pack_start(colimg, True)
        n.col.pack_start(coltext, True)
        n.col.add_attribute(colimg, 'icon-name', 0)
        n.col.add_attribute(coltext, 'text', 1)
        store.set_sort_column_id(1, SortType.ASCENDING)
        n.tview.append_column(n.col)
        n.tview.set_activate_on_single_click(True)
        n.tview.connect('row_activated', self.tview_row_activated)
        n.tview.connect('row_expanded', self.tview_row_expanded)
        n.tview.connect('row_collapsed', self.tview_row_collapsed)
        tscroll = ScrolledWindow()
        tscroll.set_child(n.tview)
        n.tview.set_has_tooltip(False)

        textview = TextView()
        n.buffer = textview.get_buffer()
        scrolltext = ScrolledWindow()
        scrolltext.set_child(textview)

        n.sidebar.set_start_child(tscroll)
        n.sidebar.set_end_child(scrolltext)

        photo.set_can_shrink(n.shrinkable)

        viewport = Viewport()
        viewport.set_scroll_to_focus(True)
        scrollport = ScrolledWindow()
        scrollport.set_child(photo)
        viewport.set_child(scrollport)

        width, height = self.screen_size()

        hpane.set_start_child(n.sidebar)
        hpane.set_end_child(viewport)
        hpane.set_position(int(width*0.15))

        evk = EventControllerKey()
        evk.connect('key-pressed', self.key_pressed)
        self.add_controller(evk)

        self.set_child(hpane)
        self.set_icon_name('photon')
        self.maximize()

        self.set_size_request(int(width/2), int(height/2))
        
        n.buffer.set_text(f"Size of the screen : {width} x {height} px")
        self.set_has_tooltip(False)

    def sidebar_button_clicked(self, button):
        self.toggle_pane_visible()

    def tview_button_clicked(self, button):
        self.toggle_view()

    def home_button_clicked(self, button):
        store.clear()
        n.photos.clear()
        run(fs_walk(PHOTON))

    def open_folder_button_clicked(self, button):
        n.open_folder_dialog.show()

    def open_folder_dialog_response(self, dialog, response):
        if response == ResponseType.ACCEPT:
            n.path = dialog.get_file().get_path()
            if n.exif_view:
                self.toggle_view()
            else:
                store.clear()
                n.photos.clear()
                run(fs_walk(n.path))

    @timing
    def enhance_button_clicked(self, button):
        self.magic_enhance_pix()

    def about_button_clicked(self, button):
        about = AboutDialog()
        about.set_transient_for(self)
        about.set_modal(self)
        about.set_program_name('Photon')
        about.set_version('0.1dev')
        about.set_logo_icon_name('photon')
        about.set_comments('Photo manager in GTK4-PyGObject')
        about.set_authors(['Loc Cosnier aka alkimya\nloc.cosnier@pm.me'])
        about.set_website('https://github.com/alkimya/photon')
        about.set_website_label('Photon website')
        about.set_copyright('Copyright 2022 Loc Cosnier')
        about.set_license_type(License.GPL_3_0)

        about.show()

    def tview_row_activated(self, treeview, path, column):
        """dev mode"""
        n.itr_row = store.get_iter(path)
        url = get_url(n.itr_row)
        if url is not None:
            if isfile(url):
                load_pil(n.itr_row)
                n.itr_row = get_parent(n.itr_row)            
            elif has_child(n.itr_row):
                itr = first_pix(n.itr_row)
                load_pil(itr)
            else:
                n.wip = n.pix = None
        else:
            itr = first_pix(n.itr_row)
            load_pil(itr)

    def tview_row_expanded(self, treeview, itr, path):
        store.set_value(itr, 0, 'document-open-symbolic')

    def tview_row_collapsed(self, treeview, itr, path):
        store.set_value(itr, 0, 'folder-new-symbolic')

    def saveimg(self):
        if n.wip != n.pix.copy() and not n.dont_ask:
            n.saveimg_dialog = Dialog()
            n.saveimg_dialog.set_transient_for(self)
            n.saveimg_dialog.set_modal(True)
            width, height = self.screen_size()
            n.saveimg_dialog.set_size_request(int(width/10), int(height/10))
            n.saveimg_dialog.set_title('Save the Picture')
            label = Label.new('Do you want to overwrite the Picture ?')
            n.saveimg_dialog.get_content_area().append(label)
            n.saveimg_dialog.add_button('Yes', ResponseType.ACCEPT)
            n.saveimg_dialog.add_button('No, thanks !', ResponseType.REJECT)
            ask_button = CheckButton.new_with_label('Don\'t ask me again')
            ask_button.set_active(n.dont_ask)
            ask_button.connect('activate', self.ask_button_activate)
            ask_button.connect('toggled', self.ask_button_toggled)
            n.saveimg_dialog.connect('response', self.saveimg_dialog_response)
            n.saveimg_dialog.get_content_area().append(ask_button)
            n.saveimg_dialog.show()
        elif n.wip != n.pix.copy() and n.dont_ask:
            name = get_url(n.itr_photo)
            n.wip.save(name, quality=n.quality)

    def ask_button_activate(self, button):
        n.dont_ask = True

    def ask_button_toggled(self, button):
        n.dont_ask = True if button.get_active() else False

    def saveimg_dialog_response(self, dialog, response):
        if response == ResponseType.ACCEPT:
            name = get_url(n.itr_photo)
            n.wip.save(name, quality=n.quality)
            dialog.close()
        elif response == ResponseType.REJECT:
            dialog.close()

    def save_asimg(self):
        n.save_asimg_dialog = FileChooserNative.new('Save as', self, FileChooserAction.SAVE)
        n.save_asimg_dialog.set_current_folder(File.new_for_path(dirname(get_url(n.itr_photo))))
        file_filter = FileFilter()
        file_filter.set_name('Image Files')
        file_filter.add_mime_type('image/jpeg')
        file_filter.add_mime_type('image/png')
        n.save_asimg_dialog.add_filter(file_filter)
        n.save_asimg_dialog.connect('response', self.save_asimg_dialog_response)
        n.save_asimg_dialog.show()

    def save_asimg_dialog_response(self, dialog, response):
        if response == ResponseType.ACCEPT:
            name = dialog.get_current_folder().get_path() + '/' + dialog.get_current_name()
            n.wip.save(name, quality=n.quality)

    def toggle_fullscreen(self):
        n.fullscreen = not n.fullscreen
        if n.fullscreen:
            n.sidebar.set_visible(False)
            self.fullscreen()
        else:
            self.unfullscreen()
            n.sidebar.set_visible(True)

    def toggle_dark_theme(self):
        n.dark_theme = not n.dark_theme
        theme = ColorScheme.FORCE_DARK if n.dark_theme else ColorScheme.FORCE_LIGHT
        self.get_application().get_style_manager().set_color_scheme(theme)

    def toggle_pane_visible(self):
        n.pane_visible = not n.pane_visible
        n.sidebar.set_visible(n.pane_visible)

    @timing
    def toggle_view(self):
        n.exif_view = not n.exif_view
        label = 'Exif Tags view : ' if n.exif_view else 'File System view : '
        n.col.set_title(label)
        store.clear()
        if n.exif_view:
            exif_walk()
        else:
            n.photos.clear()
            run(fs_walk(n.path))

    def move_left(self, itr):
        move_to(itr, prev_pix)

    def move_right(self, itr):
        move_to(itr, next_pix)

    def delete(self, itr):
        file = File.new_for_path(get_url(itr))
        file.trash()
        if store.remove(itr):
            load_pil(itr)
        else:
            itr = first_pix(get_iter(n.tview.get_cursor().path))
            load_pil(itr)
    
    @timing
    def rotate(self, angle):
        n.wip = rotate(n.wip, angle)
        photo.set_pixbuf(to_pix(n.wip))

    @timing
    def zoom(self, delta):
        n.wip = resize(n.wip, map(lambda x: int(x*(1+delta)), n.wip.size))
        photo.set_pixbuf(to_pix(n.wip))

    def shrink(self):
        n.shrinkable = not n.shrinkable
        photo.set_can_shrink(n.shrinkable)

    @timing
    def magic_enhance_pix(self):
        n.wip = magic_enhance(n.wip)
        photo.set_pixbuf(to_pix(n.wip))

    def apply_filter(self, fil):
        n.wip = simple_filter(n.wip, fil)
        photo.set_pixbuf(to_pix(n.wip))

    def reinitialise(self):
        n.wip = n.pix.copy()
        photo.set_pixbuf(to_pix(n.wip))

    def screen_size(self):
        display = self.get_display()
        screen = display.get_monitor_at_surface(Surface.new_toplevel(display))
        screen_size = screen.get_geometry()
        return (screen_size.width, screen_size.height)

    def key_pressed(self, event, keyval, keycode, state):
        key = keyval_name(keyval)
        print(key, state)
        match key, state:
            case 'q', ModifierType.CONTROL_MASK:
                self.close()
            case 's', ModifierType.CONTROL_MASK:
                    self.saveimg()
            case 's', _:
                    self.apply_filter(SMOOTH)
            case 'S', ModifierType.CONTROL_MASK:
                self.save_asimg()
            case 'S', _:
                    self.apply_filter(SMOOTH_MORE)
            case 'F11', _:
                self.toggle_fullscreen()
            case 'Escape', _:
                self.unfullscreen()
                self.toggle_pane_visible()
            case 'Left', _:
                self.move_left(n.itr_photo)
            case 'Right', _:
                self.move_right(n.itr_photo)
            case 'Delete', _:
                self.delete(n.itr_photo)
            case 'r', _:
                self.rotate(-90)
            case 'l', _:
                self.rotate(90)
            case 'plus', _:
                self.zoom(0.25)
            case 'minus', _:
                self.zoom(-0.25)
            case '1', _:
                self.shrink()
            case '0', _:
                self.reinitialise()
            case '2', _:
                self.zoom(1)
            case 'F1', _:
                self.toggle_dark_theme()
            case 'e', _:
                self.apply_filter(EDGE_ENHANCE)
            case 'E', _:
                self.apply_filter(EDGE_ENHANCE_MORE)
            case 'p', _:
                self.toggle_pane_visible()
            case 'rightdoublequotemark', _: # Alt Gr + b
                self.apply_filter(BLUR)
            case 'cent', _: # Alt Gr + c
                self.apply_filter(CONTOUR)
            case 'eth', _: # Alt Gr + d
                self.apply_filter(DETAIL)
            case 'EuroSign', _: # Alt Gr + e
                self.apply_filter(EMBOSS)
            case 'dstroke', _: # Alt Gr +f
                self.apply_filter(FIND_EDGES)
            case 'ssharp', _: # Alt Gr + s
                self.apply_filter(SHARPEN)
            case 'backslash', _: # Alt Gr + º
                self.magic_enhance_pix()
            case 'dead_belowdot', _: # Alt Gr + -
                self.apply_filter(MinFilter)
            case 'bracketright', _: # Alt Gr + +
                self.apply_filter(MaxFilter)
            case 'mu', _: # Alt Gr + m
                self.apply_filter(MedianFilter)
            case 'downarrow', _: # Alt Gr + u
                self.apply_filter(UnsharpMask)

class App(Application):
    """dev mode"""

    def __init__(self, *args, **kwargs):
        """dev mode"""
        super().__init__(*args, application_id="org.alkimya.photon", **kwargs)
        self.window = None

    def do_activate(self):
        """dev mode"""
        if not self.window:
            self.window = AppWindow(application=self, title="Photon")
        self.window.present()
        run(fs_walk(PHOTON))


@timing
async def fs_walk(path, parent=None):
    """dev mode"""
    if path is not None:
        async def process(entry):
            fullname = concat(path, entry)
            icon = 'folder-new-symbolic' if isdir(fullname) else 'applications-graphics-symbolic'
            if isdir(fullname):
                item = store.append(parent, [icon, entry, fullname])
                await fs_walk(fullname, item)
            elif is_image(fullname):
                store.append(parent, [icon, entry, fullname])
                n.photos.append((entry, fullname))
        await gather(*map(process, listdir(path)))

@timing
def exif_walk():
    """dev mode"""
    exifs = dict(filter(lambda x: has_exif(x[1]), n.photos))
    no_exifs = dict(_ for _ in n.photos if not has_exif(_[1]))
    uniques = dict((get_date(imread(_)), _) for _ in exifs.values())
    print(len(n.photos), len(exifs), len(no_exifs), len(uniques))
    pictures = set(uniques.keys())
    for year in set(pic[0:4] for pic in pictures):
        y_itr = store.append(None, ['folder-new-symbolic', year, None])
        for month in set(pic[0:6] for pic in pictures):
            if year in month:
                m_itr = store.append(y_itr, ['folder-new-symbolic', month[4:6], None])
                for day in set(pic[0:8] for pic in pictures):
                    if month in day:
                        d_itr = store.append(m_itr, ['folder-new-symbolic', day[6:8], None])
                        for pic in pictures:
                            if day in pic:
                                store.append(d_itr, ['applications-graphics-symbolic', pic, uniques[pic]])
    if len(no_exifs) != 0:
        itr = store.append(None, ['folder-new-symbolic', '¯\_(ツ)_/¯', None])
    for key, value in no_exifs.items():
        store.append(itr, ['applications-graphics-symbolic', key, value])
    text = f"Numbers of pictures : {len(n.photos)}\nNumbers of pictures with exifs data : {len(exifs)}\nNumbers of unique pictures with exifs data : {len(uniques)}"
    n.buffer.set_text(text)




def get_name(itr):
    """Retrieve the basename of the picture file stored in the TreeStore"""
    return store.get_value(itr, 1)


def get_url(itr):
    """Retrieve the url of the picture stored in the TreeStore"""
    return store.get_value(itr, 2)


def is_image(url):
    """Test if a file has an image mime type as JPEG or PNG"""
    match guess_type(url)[0].split('/')[-1]:
        case 'jpeg' | 'png':
            return True
        case _:
            return False


def first():
    """Retrieve the TreeIter of the first node of the TreeStore"""
    return store.get_iter_first()


def has_nodes(itr):
    """Test if a node of the TreeStore has nodes (non empty children)"""
    if has_child(itr):
        for _ in n_children(itr):
            if nth_child(itr, _):
                return True
    return False


def has_child(itr):
    """Test if a node of the TreeStore is empty, without child, or not"""
    return store.iter_has_child(itr)


def n_children(itr):
    """Return the number of children of a node"""
    return store.iter_n_children(itr)


def nth_child(itr, ind):
    """Retrieve the nth child of itr"""
    return store.iter_nth_child(itr, ind)


def get_parent(itr):
    return store.iter_parent(itr)


def next(itr):
    return store.iter_next(itr)


def previous(itr):
    return store.iter_previous(itr)


def get_path(itr):
    return store.get_path(itr)


def get_iter(path):
    return store.get_iter(path)


def set_cursor(itr):
    expand(itr)
    n.tview.set_cursor(get_path(itr), n.col, False)
    

def expand(itr):
    n.tview.expand_to_path(get_path(itr))


def edging(itr, nth):
    itr = nth_child(itr, nth)
    url = get_url(itr)
    if url is not None and isfile(url):
        return itr
    elif has_child(itr):
        n.tview.expand_to_path(get_path(itr))
        nth = 0 if nth == 0 else n_children(itr)-1
        return edging(itr, nth)


def first_pix(itr):
    return edging(itr, 0)


def last_pix(itr):
    return edging(itr, n_children(itr)-1)


def centering(itr, center, edge):
    itr_parent = get_parent(itr)
    if itr := center(itr):
        if isfile(get_url(itr)):
            return itr
        return edge(itr)
    elif isfile(get_url(n.itr_row)):
        return edge(itr_parent)
    elif get_url(itr_parent) != get_url(n.itr_row):
        if itr := center(itr_parent):
            return edge(itr)
    return edge(n.itr_row)


def prev_pix(itr):
    return centering(itr, previous, last_pix)


def next_pix(itr):
    return centering(itr, next, first_pix)


def move_to(itr, callback):
    itr = callback(itr)
    load_pil(itr)


def expand_parents(itr):
    n.tview.expand_row(get_path(itr), False)
    if get_url(get_parent(itr)) != get_url(n.itr_row):
        expand_parents(get_parent(itr))


def repr_itr(itr):
    return store.get_string_from_iter(itr)

def load_pil(itr):
    url = get_url(itr)
    n.pix = imread(url)
    n.wip = n.pix.copy()
    photo.set_pixbuf(to_pix(n.wip))
    n.buffer.set_text(exif_table(url))
    set_cursor(itr)
    n.itr_photo = itr
    

if __name__ == "__main__":
    app = App()
    app.run(sys.argv)
