# /usr/bin/python3
from argparse import Namespace
from mimetypes import guess_type
import os
import sys

import gi
gi.require_version('Gtk', '4.0')
from gi.repository import Gtk, Gdk, GdkPixbuf
from PIL.ExifTags import TAGS
from PIL import Image

from profile import timing

n = Namespace()
n.pixbuf_center = GdkPixbuf.Pixbuf()
n.pixbuf_prev = GdkPixbuf.Pixbuf()
n.pixbuf_next = GdkPixbuf.Pixbuf()
n.pixbuf_wip = GdkPixbuf.Pixbuf()
n.photo = Gtk.Picture()
n.shrinkable = True
n.itr_photo = Gtk.TreeIter()
n.itr_row = Gtk.TreeIter()
n.index = 0
n.fullscreen = False
n.evk = Gtk.EventControllerKey()
n.store = Gtk.TreeStore(str, str, str)
n.PHOTON = '/home/loc/media/images/photos'


class AppWindow(Gtk.ApplicationWindow):
    """dev mode"""

    def __init__(self, *args, **kwargs):
        """dev mode"""
        super().__init__(*args, **kwargs)

        n.pixbuf_center = GdkPixbuf.Pixbuf().new_from_file('/home/loc/media/images/spring.jpg')
        n.theme = Gtk.IconTheme()
        n.theme.set_theme_name('Yaru')

        n.header = Gtk.HeaderBar()
        self.set_titlebar(n.header)

        n.home_button = Gtk.Button(label='Home')
        n.home_button.set_icon_name('go-home-symbolic')
        n.home_button.connect('clicked', self.home_button_clicked)

        n.open_folder_button = Gtk.Button(label='Open')
        n.open_folder_button.set_icon_name('filemanager-app-symbolic')
        n.open_folder_button.connect('clicked', self.open_folder_button_clicked)

        n.open_folder_dialog = Gtk.FileChooserNative.new(
            title='Choose a folder full of photos!', parent=self, action=Gtk.FileChooserAction.SELECT_FOLDER)
        n.open_folder_dialog.connect('response', self.open_folder_dialog_response)

        treepath_walk(n.PHOTON)

        n.about_button = Gtk.Button(label='About')
        n.about_button.set_icon_name('help-about-symbolic')
        n.about_button.connect('clicked', self.about_button_clicked)

        n.prefs_button = Gtk.Button(label='Preferences')
        n.prefs_button.set_icon_name('tweaks-app-symbolic')

        n.header.pack_start(n.home_button)
        n.header.pack_start(n.open_folder_button)
        n.header.pack_start(n.prefs_button)
        n.header.pack_start(n.about_button)

        n.hpane = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)

        n.vpane = Gtk.Paned.new(Gtk.Orientation.VERTICAL)

        n.treeview = Gtk.TreeView().new_with_model(n.store)
        n.col = Gtk.TreeViewColumn('Photos tree :')
        n.coltext = Gtk.CellRendererText()
        n.colimg = Gtk.CellRendererPixbuf()
        n.col.pack_start(n.colimg, True)
        n.col.pack_start(n.coltext, True)
        n.col.add_attribute(n.colimg, 'icon-name', 0)
        n.col.add_attribute(n.coltext, 'text', 1)
        n.store.set_sort_column_id(1, Gtk.SortType.ASCENDING)
        n.treeview.append_column(n.col)
        n.treeview.set_activate_on_single_click(True)
        n.treeview.set_headers_visible(False)
        n.treeview.connect('row_activated', self.treeview_row_activated)
        n.treeview.connect('row_expanded', self.treeview_row_expanded)
        n.treeview.connect('row_collapsed', self.treeview_row_collapsed)

        n.scrolltree = Gtk.ScrolledWindow()
        n.scrolltree.set_child(n.treeview)

        n.textview = Gtk.TextView()
        n.buffer = n.textview.get_buffer()
        n.buffer.set_text("Life is short, learn Python!")
        n.scrolltext = Gtk.ScrolledWindow()
        n.scrolltext.set_child(n.textview)

        n.vpane.set_start_child(n.scrolltree)
        n.vpane.set_end_child(n.scrolltext)

        n.photo.set_can_shrink(n.shrinkable)
        n.photo.set_pixbuf(n.pixbuf_center)
        n.viewport = Gtk.Viewport()
        n.viewport.set_scroll_to_focus(True)
        n.scrollport = Gtk.ScrolledWindow()
        n.scrollport.set_child(n.photo)
        n.viewport.set_child(n.scrollport)

        n.hpane.set_start_child(n.vpane)
        n.hpane.set_end_child(n.viewport)
        n.hpane.set_position(216)

        n.evk.connect('key-pressed', self.key_pressed)
        self.add_controller(n.evk)

        self.set_child(n.hpane)
        self.set_icon_name('photon')
        self.maximize()

        #self.get_settings().set_property('gtk-application-prefer-dark-theme', True)

    def home_button_clicked(self, button):
        n.store.clear()
        treepath_walk(n.PHOTON)

    def open_folder_button_clicked(self, button):
        n.open_folder_dialog.show()

    def open_folder_dialog_response(self, dialog, response):
        if response == Gtk.ResponseType.ACCEPT:
            n.store.clear()
            treepath_walk(dialog.get_file().get_path())

    def about_button_clicked(self, button):
        n.about = Gtk.AboutDialog()
        n.about.set_transient_for(self)
        n.about.set_modal(self)
        n.about.set_logo_icon_name('photon')
        n.about.set_comments('Photo manager in PyGtk4')
        n.about.set_authors(['Loc Cosnier aka alkimya\nloc.cosnier@pm.me'])
        n.about.set_copyright('Copyright 2022 Loc Cosnier')
        n.about.set_license_type(Gtk.License.MIT_X11)

        n.about.set_version('0.1dev')

        n.about.show()

    def treeview_row_activated(self, treeview, path, column):
        """dev mode"""
        n.itr_row = n.store.get_iter(path)
        url = n.store.get_value(n.itr_row, 2)
        if is_file(url):
            n.itr_photo = n.itr_row
            n.pixbuf_center = GdkPixbuf.Pixbuf().new_from_file(url)
            n.pixbuf_wip = n.pixbuf_center
            n.photo.set_pixbuf(n.pixbuf_center)
            n.buffer.set_text(exif_table(url))
            itr_parent = n.store.iter_parent(n.itr_photo)
            num = n.store.iter_n_children(itr_parent)
            match num:
                case 1:
                    n.pixbuf_prev = n.pixbuf_next = n.pixbuf_center
                case 2:
                    new_itr = n.store.iter_next(
                        n.itr_row) if n.store.iter_next(
                        n.itr_row) else n.store.iter_previous(
                        n.itr_row)
                    new_url = n.store.get_value(new_itr, 2)
                    n.pixbuf_prev = n.pixbuf_next = GdkPixbuf.Pixbuf().new_from_file(new_url)
                case _:
                    itr_prev = n.store.iter_previous(
                        n.itr_photo) if n.store.iter_previous(
                        n.itr_photo) else iter_last_child(itr_parent)
                    itr_next = n.store.iter_next(
                        n.itr_photo) if n.store.iter_next(
                        n.itr_photo) else iter_first_child(itr_parent)
                    url_prev = n.store.get_value(itr_prev, 2)
                    url_next = n.store.get_value(itr_next, 2)
                    n.pixbuf_prev = GdkPixbuf.Pixbuf().new_from_file(url_prev)
                    n.pixbuf_next = GdkPixbuf.Pixbuf().new_from_file(url_next)
        else:
            if n.store.iter_has_child(n.itr_row):
                itr_center = iter_first_child(n.itr_row)
                n.itr_photo = itr_center
                url_center = n.store.get_value(itr_center, 2)
                n.pixbuf_center = GdkPixbuf.Pixbuf().new_from_file(url_center)
                n.pixbuf_wip = n.pixbuf_center
                n.photo.set_pixbuf(n.pixbuf_center)
                n.buffer.set_text(exif_table(url_center))
                itr_prev = iter_last_child(n.itr_row)
                url_prev = n.store.get_value(itr_prev, 2)
                n.pixbuf_prev = GdkPixbuf.Pixbuf().new_from_file(url_prev)
                itr_next = iter_next_child(itr_center)
                url_next = n.store.get_value(itr_next, 2)
                n.pixbuf_next = GdkPixbuf.Pixbuf().new_from_file(url_next)
            else:
                n.pixbuf_prev = n.pixbuf_next = n.pixbuf_center = GdkPixbuf.Pixbuf()

    def treeview_row_expanded(self, treeview, itr, path):
        n.store.set_value(itr, 0, 'document-open-symbolic')

    def treeview_row_collapsed(self, treeview, itr, path):
        n.store.set_value(itr, 0, 'folder-new-symbolic')

    def toggle_fullscreen(self):
        n.fullscreen = not n.fullscreen
        if n.fullscreen:
            n.vpane.set_visible(False)
            self.fullscreen()
        else:
            self.unfullscreen()
            n.vpane.set_visible(True)

    def key_pressed(self, event, keyval, keycode, state):
        key = Gdk.keyval_name(keyval)
        print(key)
        match key:
            case 'q':
                self.close()
            case 'F11':
                self.toggle_fullscreen()
            case 'Left':
                move_left(n.itr_photo)
            case 'Right':
                move_right(n.itr_photo)
            case 'Delete':
                move_right(n.itr_photo)
            case 'r':
                rotate(-90)
            case 'l':
                rotate(90)
            case 'plus':
                zoom(0.25)
            case 'minus':
                zoom(-0.25)
            case '1':
                reinitialise()


class Application(Gtk.Application):
    """dev mode"""

    def __init__(self, *args, **kwargs):
        """dev mode"""
        super().__init__(*args, application_id="org.alkimya.photon", **kwargs)
        self.window = None

    def do_activate(self):
        """dev mode"""
        if not self.window:
            self.window = AppWindow(application=self, title="Photon")
        self.window.present()


def treepath_walk(path, parent=None):
    """dev mode"""
    for entry in os.listdir(path):
        fullname = os.path.join(path, entry)
        isfolder = is_folder(fullname)
        img = 'folder-new-symbolic' if isfolder else 'applications-graphics-symbolic'
        if isfolder:
            item = n.store.append(parent, [img, entry, fullname])
            treepath_walk(fullname, item)
        elif is_image(fullname):
            n.store.append(parent, [img, entry, fullname])


@timing
def exif_table(url):
    image = Image.open(url)
    out = ''
    for k, v in image.getexif().items():
        out = out + str(TAGS.get(k)) + ' : ' + str(v) + '\n'
    return out


def is_image(url):
    mimetype = guess_type(url)[0]
    if mimetype is not None:
        if mimetype.split('/')[0] == 'image':
            return True
    return False


def is_file(url):
    return os.path.isfile(url)


def is_folder(url):
    return os.path.isdir(url)


def has_nodes(itr):
    if n.store.iter_has_child(itr):
        for n in n.store.iter_n_children(itr):
            if n.store.iter_nth_child(itr, n):
                return True
    return False


def iter_first_child(itr):
    new_itr = n.store.iter_nth_child(itr, 0)
    url = n.store.get_value(new_itr, 2)
    if is_file(url):
        return new_itr
    elif n.store.iter_has_child(new_itr):
        return iter_first_child(new_itr)


def iter_last_child(itr):
    num = n.store.iter_n_children(itr)
    new_itr = n.store.iter_nth_child(itr, num-1)
    url = n.store.get_value(new_itr, 2)
    if is_file(url):
        return new_itr
    elif n.store.iter_has_child(new_itr):
        return iter_last_child(new_itr)


def iter_next_child(itr):
    itr_parent = n.store.iter_parent(itr)
    if itr_next := n.store.iter_next(itr):
        if is_file(n.store.get_value(itr_next, 2)):
            return itr_next
        return iter_first_child(itr_next)
    elif is_file(n.store.get_value(n.itr_row, 2)):
        return iter_first_child(itr_parent)
    elif n.store.get_value(itr_parent, 2) != n.store.get_value(n.itr_row, 2):
        if itr_next := n.store.iter_next(itr_parent):
            iter_first_child(itr_next)
    return iter_first_child(n.itr_row)


def iter_prev_child(itr):
    itr_parent = n.store.iter_parent(itr)
    if itr_prev := n.store.iter_previous(itr):
        if is_file(n.store.get_value(itr_prev, 2)):
            return itr_prev
        return iter_last_child(itr_prev)
    elif is_file(n.store.get_value(n.itr_row, 2)):
        return iter_last_child(itr_parent)
    elif n.store.get_value(itr_parent, 2) != n.store.get_value(n.itr_row, 2):
        if itr_prev := n.store.iter_previous(itr_parent):
            iter_last_child(itr_prev)

    return iter_last_child(n.itr_row)


@timing
def move_left(itr):
    n.photo.set_pixbuf(n.pixbuf_prev)
    n.pixbuf_next = n.pixbuf_center
    n.pixbuf_center = n.pixbuf_prev
    n.pixbuf_wip = n.pixbuf_center
    n.pixbuf_prev = GdkPixbuf.Pixbuf().new_from_file(n.store.get_value(iter_prev_child(itr), 2))
    n.itr_photo = iter_prev_child(itr)
    n.buffer.set_text(exif_table(n.store.get_value(n.itr_photo, 2)))


@timing
def move_right(itr):
    n.photo.set_pixbuf(n.pixbuf_next)
    n.pixbuf_prev = n.pixbuf_center
    n.pixbuf_center = n.pixbuf_next
    n.pixbuf_wip = n.pixbuf_center
    n.pixbuf_next = GdkPixbuf.Pixbuf().new_from_file(n.store.get_value(iter_next_child(itr), 2))
    n.itr_photo = iter_next_child(itr)
    n.buffer.set_text(exif_table(n.store.get_value(n.itr_photo, 2)))


@timing
def rotate(delta):
    n.pixbuf_wip = n.pixbuf_wip.rotate_simple(delta % 360)
    n.photo.set_pixbuf(n.pixbuf_wip)


@timing
def zoom(delta):
    width = n.pixbuf_wip.get_width()
    height = n.pixbuf_wip.get_height()
    width = int(width * (1 + delta))
    height = int(height * (1 + delta))
    n.pixbuf_wip = n.pixbuf_wip.scale_simple(width, height, GdkPixbuf.InterpType.BILINEAR)
    n.photo.set_pixbuf(n.pixbuf_wip)


@timing
def reinitialise():
    n.shrinkable = not n.shrinkable
    n.pixbuf_wip = n.pixbuf_center
    n.photo.set_pixbuf(n.pixbuf_wip)
    n.photo.set_can_shrink(n.shrinkable)


if __name__ == "__main__":
    app = Application()
    app.run(sys.argv)
